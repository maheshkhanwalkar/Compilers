package com.revtekk.compilers

fun main() {
    val builder = ValueNumber()

    val a = builder.newVariable("a")
    val b = builder.newVariable("b")
    val c = builder.newVariable("c")

    val aPlusB = builder.newBinaryExpression(BinaryOp.PLUS, a, b)
    val aPlusBTimesC = builder.newBinaryExpression(BinaryOp.MULTIPLY, aPlusB, c)
    val aPlusBAgain = builder.newBinaryExpression(BinaryOp.PLUS, a, b)
    val exp = builder.newBinaryExpression(BinaryOp.MULTIPLY, aPlusBAgain, aPlusBTimesC)

    /**
     * exp = (a+b)*((a+b)*c)
     *
     * The actual tree that is generated by the Value-Number construction
     * will look like this:
     *
     *           *
     *         /  \
     *        |   *
     *        \ /  \
     *         +    c
     *       /  \
     *      a    b
     *
     * Since the expression (a + b) is common, the builder will re-use the node
     * for every occurrence within the greater expression
     */
}
