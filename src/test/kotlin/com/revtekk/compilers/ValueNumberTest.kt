package com.revtekk.compilers

fun main() {
    val builder = ValueNumber()

    val a = builder.newVariable("a")
    val b = builder.newVariable("b")
    val c = builder.newVariable("c")

    val aPlusB = builder.newBinaryExpression(BinaryOp.PLUS, a, b)
    val aPlusBTimesC = builder.newBinaryExpression(BinaryOp.MULTIPLY, aPlusB, c)
    val aPlusBAgain = builder.newBinaryExpression(BinaryOp.PLUS, a, b)
    val exp = builder.newBinaryExpression(BinaryOp.MULTIPLY, aPlusBAgain, aPlusBTimesC)

    /**
     * exp = (a+b)*((a+b)*c)
     *
     * The actual DAG that is generated by the Value-Number construction
     * will look like this:
     *
     *           *
     *         /  \
     *        |   *
     *        \ /  \
     *         +    c
     *       /  \
     *      a    b
     *
     * Since the expression (a + b) is common, the builder will re-use the node
     * for every occurrence within the greater expression
     */

    builder.reset()

    val x = builder.newVariable("x")
    val y = builder.newVariable("y")

    val xPlusY = builder.newBinaryExpression(BinaryOp.PLUS, x, y)
    val xMinusY = builder.newBinaryExpression(BinaryOp.MINUS, x, y)

    val timesOne = builder.newBinaryExpression(BinaryOp.MULTIPLY, xPlusY, xMinusY)
    val xPlusYTwo = builder.newBinaryExpression(BinaryOp.PLUS, x, y)

    val left = builder.newBinaryExpression(BinaryOp.MINUS, xPlusYTwo, timesOne)

    val xPlusYThree = builder.newBinaryExpression(BinaryOp.PLUS, x, y)
    val xMinusYTwo = builder.newBinaryExpression(BinaryOp.MINUS, x, y)

    val timesTwo = builder.newBinaryExpression(BinaryOp.MULTIPLY, xPlusYThree, xMinusYTwo)
    val total = builder.newBinaryExpression(BinaryOp.PLUS, left, timesTwo)

    /**
     * [Exercise 6.1.1 Dragon Book]
     *
     * total = ((x+y)-((x+y)*(x-y)))+((x+y)*(x-y))
     *
     * The actual DAG that is generated by the Value-Number construction
     * will look like this:
     *
     *        +
     *      /  \
     *     -    \
     *   /   \ /
     *  |    *
     *  |   /  \
     *  \  /    -
     *    +  /  \
     *    /\/    /
     *   // \  /
     *  x    y
     *
     * The expressions (x+y), (x-y), and (x+y)*(x-y) are all common, so the
     * builder will re-use the nodes during the construction
     */
}
